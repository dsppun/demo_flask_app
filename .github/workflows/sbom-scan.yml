name: Generate SBOM with AI Scanner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  generate-sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout demo_flask_app
        uses: actions/checkout@v4
        with:
          path: demo_flask_app

      - name: Create SBOM scanner script
        run: |
          cat > llm_check.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          from pathlib import Path
          import google.generativeai as genai
          
          def main():
              repo_file = Path("repomix-output.txt")
              output_file = Path("VERSION.md")
              api_key = os.getenv("GEMINI_API_KEY")
          
              if not api_key:
                  print("Error: GEMINI_API_KEY environment variable not set.", file=sys.stderr)
                  sys.exit(1)
          
              if not repo_file.exists():
                  print(f"Error: {repo_file} does not exist.", file=sys.stderr)
                  sys.exit(1)
          
              with open(repo_file, "r", encoding="utf-8") as f:
                  repo_content = f.read()
          
              prompt = """You are a code analysis assistant.
          Analyze the following repository contents and extract a list of tools, packages,
          docker images, and other components used in the code, including their versions/tags.
          Output the result in a table format with columns:
          
          Type | Name | Version/Tag
          
          Do not include any commentary or explanations â€” only the table.
          Repository contents:
          """ + repo_content
          
              genai.configure(api_key=api_key)
              model = genai.GenerativeModel('gemini-1.5-flash')
          
              print("Querying Gemini AI...")
              try:
                  response = model.generate_content(prompt)
                  result = response.text.strip()
              except Exception as e:
                  print(f"Error: Gemini API request failed: {e}", file=sys.stderr)
                  sys.exit(1)
          
              with open(output_file, "w", encoding="utf-8") as f:
                  f.write(result + "\n")
          
              print(f"Version list written to {output_file}")
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Install repomix
        run: npm install -g repomix
      
      - name: Create repomix output
        run: repomix demo_flask_app --output repomix-output.txt --style plain

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: pip install google-generativeai
      
      - name: Run SBOM analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python llm_check.py

      - name: Upload VERSION.md
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: VERSION.md
